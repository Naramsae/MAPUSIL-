#include <string.h>
#include <stdio.h>

struct Player{
    
    int score;
    char name;

}P1,P2,P3,P4;

int KEYPAD[4][4] = {0};

int main (int argc, char* argv[]){
    
    if(argc!=5)     //4명 입력이 아닌 경우
        print_clcd('requires','4 players');

    P1.name = argv[1];
    P2.name = argv[2];
    P3.name = argv[3];
    P4.name = argv[4];

    while(1){    //게임이 돌아가는 중
    reset_game();
    
        int n_round = 0;  //라운드
        int turn;   //누구의 차례일까요?

        while(1){   //0라운드부터 시작 : 한명이라도 점수가 0이 되면 반복문 탈출

        turn = n_round % 4;
        print_clcd('ROUND','START');    //만약 여기서 출력 문제 있으면 usleep 써보기
        switch (turn){      //누가 먼저 공격하는지 결정해서 clcd에 출력하기
            case 0: //P1이 공격할 차례 
                print_clcd(P1.name,'ATTACK');
                if (PRESS(1)==0)
                    P1.score = P1.score -1;  // 이상한거 누르면 A 감점   
                if (PRESS(2)==0)
                    P2.score = P2.score -1;  // 이상한거 누르면 B 감점
                if (PRESS(3)==0)
                    P3.score = P3.score -1;  // 이상한거 누르면 C 감점
                if (PRESS(4)==0)
                    P4.score = P4.score -1;  // 이상한거 누르면 D 감점
                clear_dot_matrix();
                compare_data(1);
                break;

            case 1: //P2이 공격할 차례
                print_clcd(P2.name,'ATTACK');
                if (PRESS(2)==0)
                    P2.score = P2.score -1;  // 이상한거 누르면 B 감점
                if (PRESS(3)==0)
                    P3.score = P3.score -1;  // 이상한거 누르면 C 감점
                if (PRESS(4)==0)
                    P4.score = P4.score -1;  // 이상한거 누르면 D 감점
                if (PRESS(1)==0)
                    P1.score = P1.score -1;  // 이상한거 누르면 A 감점
                clear_dot_matrix();
                compare_dat(2);
                break;

            case 2: //P3이 공격할 차례
                print_clcd(P3.name,'ATTACK');
                if (PRESS(3)==0)
                    P3.score = P3.score -1;  // 이상한거 누르면 C 감점
                if (PRESS(4)==0)
                    P4.score = P4.score -1;  // 이상한거 누르면 D 감점
                if (PRESS(1)==0)
                    P1.score = P1.score -1;  // 이상한거 누르면 A 감점
                if (PRESS(2)==0)
                    P2.score = P2.score -1;  // 이상한거 누르면 B 감점
                clear_dot_matrix();
                compare_data(3);
                break;

            case 3: //P4이 공격할 차례
                print_clcd(P4.name,'ATTACK');
                if (PRESS(4)==0)
                    P4.score = P4.score -1;  // 이상한거 누르면 D 감점
                if (PRESS(1)==0)
                    P1.score = P1.score -1;  // 이상한거 누르면 A 감점
                if (PRESS(2)==0)
                    P2.score = P2.score -1;  // 이상한거 누르면 B 감점
                if (PRESS(3)==0)
                    P3.score = P3.score -1;  // 이상한거 누르면 C 감점
                clear_dot_matrix();
                compare_data(4);
                break;

            default:
                print_clcd('turn','switch error');
                break;
        }
        
        print_clcd('ROUND','END');  //만약 여기서 출력 문제 있으면 usleep 써보기
        show_score();   //앞서 진행한 라운드의 점수 보여주기
        clear_KEYPAD(); //사용된 키패드 데이터 초기화

        if(P1.score == 0 || P2.score == 0 || P3.score == 0 || P4.score == 0)    //한명이라도 점수가 0이면 게임 종료
            break;

        n_round++;  //다음 라운드로 이동
        }
    
    final();
    }

    return 0;
}

void print_clcd(char char1,char char2)
{
    clcd_clear_display(); //clcd 초기화
    clcd_entry_mode_set(1, 0);  //입력 방향 결정
    clcd_set_DDRAM(strlen(char1) - 1);
    clcd_write_string(char1); //clcd 첫째줄 char1 출력
    
    clcd_set_DDRAM(0x40 + strlen(char2) - 1);
    clcd_write_string(char2); //clcd 둘째줄 char2 출력
}

void reset_game(){      // 키패드 초기화하고 clcd에 시작 문구, fnd에 초기화된 점수 띄우기, 키패드 입력이 될때까지 깜빡이기
    
    clear_KEYPAD();
    
    P1.score = 5;   //시작 점수 5로 리셋.
    P2.score = 5;
    P3.score = 5;
    P4.score = 5;

    show_score();
    print_clcd('GAME','START');
    
    light_KEYPAD();
    clear_KEYPAD();
}

int PRESS (int p){  //Pi에 대해서 입력 받아오기 : 다른거 눌렀을 경우 0, 제대로 눌렀을 경우 1 반환
        switch (p) {
        case 1: //P1인 경우
            data_dot_matrix('1');
            break;
        case 2: //P2인 경우
            data_dot_matrix('2');    
            break;
        case 3: //P3인 경우
            data_dot_matrix('3');
            break;
        case 4: //P4인 경우
            data_dot_matrix('4');
            break;
        default:
            print_clcd('PRESS','ERROR');
            break;
        }
        read_KEYPAD();    // 첫번째 눌린 위치 받아오기
        read_KEYPAD();    // 두번째 눌린 위치 받아오기

    if (KEYPAD[p-1][0]+KEYPAD[p-1][1]+KEYPAD[p-1][2]+KEYPAD[p-1][3]==2)
        return 1;
    else
        return 0;
}

void light_KEYPAD(){    //keypad에 데이터가 입력되는 순간, LED와 DOT MATRIX 깜빡이기
    //키패드 입력을 받을때까지 다음 단계로 넘어가지 않음!!중요!!
    //여기 작성해주시면 됨다.
}

void read_KEYPAD(){ //keypad에 데이터가 입력되는 순간, 입력된 데이터 받아와서 업데이트하기
    light_KEYPAD(); 
    //데이터 받아와서 업데이트하기
}


void clear_KEYPAD(){
    memset(KEYPAD,'0',sizeof(KEYPAD)); //keypad 데이터 초기화 : memset 헤더파일 포함
}

void show_score(){
    //fnd에 P1.score, ....가 출력되게 하는 함수 만들어주세요.
}

void compare_data(int player_number) //이번 라운드에 잃은 점수 계산
{
    int round_score[4]={0}; //이번 라운드에 잃은 점수
    for(int t=0;t<4;t++){
        for(int k=0;k<4;k++){
            if(KEYPAD[player_number-1][k]!=KEYPAD[t][k])
                round_score[t]++;
        }
    }

    P1.score = P1.score - round_score[0];
    P2.score = P2.score - round_score[1];
    P3.score = P3.score - round_score[2];
    P4.score = P4.score - round_score[3];
}

void data_dot_matrix(char c){   //dot matrix에 괄호 안의 한 글자 출력하는 함수
    //여기 채워주시면 됨다.
}

void clear_dot_matrix(){    //dot matrix 초기화

}

void final(){    //패배한 사람 찾고, clcd에 띄우기
    
    char P1_result,P2_result,P3_result,P4_result;
    
    if(P1.score!=0)
        P1_result='WINNER';
    else
        P1_result='LOSER';

    if(P2.score!=0)
        P2_result='WINNER';
    else
        P2_result='LOSER';

    if(P3.score!=0)
        P3_result='WINNER';
    else
        P3_result='LOSER';

    if(P4.score!=0)
        P4_result='WINNER';
    else
        P4_result='LOSER';
        
    print_clcd(P1_result,P1.name);  //usleep?
    print_clcd(P2_result,P2.name);
    print_clcd(P3_result,P3.name);
    print_clcd(P4_result,P4.name);

    print_clcd('PRESS','ANY KEY');
    light_KEYPAD();
    clear_KEYPAD();
}


/* 위에 쓰인 함수들 기능이 문제가 없는지 확인해야합니다. 코드를 완전히 이해한 후에 
1.print_clcd 기능구현용 테스트 코드 : 연속 2개의 print_clcd가 사용되었을 때 첫 코드와 두번째 코드가 정상적으로 출력되는지 확인

light_keypad 채우기 : 주석 유의사항 참고. 이거 안되면 interrupt로 처음부터 코드 새로 짜야할듯?
light_keypad 기능구현용 테스트 코드

read_keypad 채우기
read_keypad 기능군현용 테스트 코드

show_score 채우기
show_score 기능구현용 테스트 코드

data_dot_matrix 채우기
data_dot_matrix 기능구현용 테스트 코드

clear_dot_matrix 채우기
clear_dot_matrix 기능구현용 테스트 코드

press 기능구현용 테스트 코드
*/
